// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("update_at")
  email      String   @unique
  password   String
  name       String   @unique
  avatarPath String   @default("/uploads/default-avatar.png") @map("avatar_path")
  phone      String   @default("")

  orders   Order[]
  reviews  Review[]
  favorite Product[]
}

model Product {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("update_at")
  name        String   @unique
  slug        String   @unique
  description String
  price       String
  image       String[]

  orderItems OrderItem[]
  reviews    Review[]

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?      @map("category_id")

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @map("user_id")
}

model Category {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("update_at")
  name      String    @unique
  products  Product[]
  slug      String
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("update_at")
  rating    Int
  text      String

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @map("user_review_id")

  product   Product? @relation(fields: [productId], references: [id])
  productId Int?     @map("product_id")
}

model Order {
  id        Int             @id @default(autoincrement())
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime        @updatedAt @map("update_at")
  status    EnumOrderStatus @default(PENDING)

  items OrderItem[]

  User   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("update_at")
  quantity  Int
  price     Int

  order   Order? @relation(fields: [orderId], references: [id])
  orderId Int?   @map("order_id")

  product   Product? @relation(fields: [productId], references: [id])
  productId Int?     @map("product_id")
}

enum EnumOrderStatus {
  PENDING
  PAYED
  SHIPPED
  DELIVERED
}
